matrix(1:12, nrow=3, ncol=4)
matrix(1:12, nrow=3)
matrix(1:12, ncol=4)
matrix(c(1,2,3,4,5,6,7,8,9,10,11,15), nrow=3)
matrix(1:12, nrow=3, ncol=4)
matrix(1:12, nrow=3)
matrix(1:12, ncol=4)
matrix(c(1,2,3,4,5,6,7,8,9,10,11,15), nrow=3)
matrix(1:12, nrow=3,byrow=TRUE)
matrix(1:11, nrow=3, ncol=4, byrow=TRUE)
matrix(1:12, nrow=8, ncol=9)
# Create a 3x4 matrix 'x' with numbers from 1 to 12
x <- matrix(1:12, nrow=3, ncol=4)
# Use 'str()' again to check the internal structure of matrix 'x'
str(x)
# Output will be similar to the previous 'str()' call.
# 'nrow()' returns the number of rows in the matrix 'x'
nrow(x)
# Explanation:
# This function gives the number of rows in matrix 'x'.
# Since 'x' has 3 rows, the output will be:
# [1] 3
# 'ncol()' returns the number of columns in the matrix 'x'
ncol(x)
# Explanation:
# This function gives the number of columns in matrix 'x'.
# Since 'x' has 4 columns, the output will be:
# [1] 4
# 'dim()' returns the dimensions of the matrix 'x'
dim(x)
# Explanation:
# This function returns the dimensions of 'x' in the form of a vector.
# The first value is the number of rows, and the second is the number of columns.
# Output will be:
# [1] 3 4
# 'length()' returns the total number of elements in the matrix 'x'
length(x)
# Explanation:
# This function returns the total number of elements in 'x'.
# Since 'x' has 12 elements (3 rows × 4 columns), the output will be:
# [1] 12
# === Practice 1 ===
# Please create a matrix by starting at number 12, which has 8 rows and 9 columns
matrix(12:24, nrow=8, ncol=9)
# === Combine array ===
# Creating two vectors x and y
x <- c(2, 3, 4)
y <- c(6, 7, 9)
# Use rbind() to combine vectors x and y as rows
rbind(x, y)
# Explanation:
# 'rbind()' combines x and y as rows in a matrix.
# Resulting matrix:
#      [,1] [,2] [,3]
# x      2    3    4
# y      6    7    9
# Create vectors x, y, and z
x <- c(2, 6)
y <- c(3, 7)
z <- c(4, 9)
# Use cbind() to combine x, y, and z as columns
cbind(x, y, z)
# Explanation:
# 'cbind()' combines vectors x, y, and z as columns in a matrix.
# Resulting matrix:
#      x y z
# [1,] 2 3 4
# [2,] 6 7 9
# Create vector z and use rbind() to add it to the matrix a
z <- c(8, 9, 10)
# First, combine x and y as rows to form matrix a
a <- rbind(x, y)
# Add z as a new row to matrix a using rbind()
rbind(z, a)
# Explanation:
# The 'rbind()' function is used to add z as the first row of matrix a.
# Resulting matrix:
#      [,1] [,2]
# z      8    9   10
# x      2    6
# y      3    7
# === Combine array ===
# Creating two vectors x and y
x <- c(2, 3, 4)
y <- c(6, 7, 9)
# Use rbind() to combine vectors x and y as rows
rbind(x, y)
# Explanation:
# 'rbind()' combines x and y as rows in a matrix.
# Resulting matrix:
#      [,1] [,2] [,3]
# x      2    3    4
# y      6    7    9
# Create vectors x, y, and z
x <- c(2, 6)
y <- c(3, 7)
z <- c(4, 9)
# Use cbind() to combine x, y, and z as columns
cbind(x, y, z)
# Explanation:
# 'cbind()' combines vectors x, y, and z as columns in a matrix.
# Resulting matrix:
#      x y z
# [1,] 2 3 4
# [2,] 6 7 9
# Create vectors x, y, and z
x <- c(2, 6)
y <- c(3, 7)
z <- c(4, 9)
# Use cbind() to combine x, y, and z as columns
cbind(x, y, z)
# Explanation:
# 'cbind()' combines vectors x, y, and z as columns in a matrix.
# Resulting matrix:
#      x y z
# [1,] 2 3 4
# [2,] 6 7 9
# Create vector z and use rbind() to add it to the matrix a
z <- c(8, 9, 10)
# First, combine x and y as rows to form matrix a
a <- rbind(x, y)
# Add z as a new row to matrix a using rbind()
rbind(z, a)
# Explanation:
# The 'rbind()' function is used to add z as the first row of matrix a.
# Resulting matrix:
#      [,1] [,2]
# z      8    9   10
# x      2    6
# y      3    7
# === Practice 2 ===
# Please use cbind to output a matrix as follows:
# 5 11 21 24
# 6 12 22 25
# 7 13 23 26
x <- c(5,6,7)
y <- c(11,12,13)
z <- c(21,22,23)
k <- c(24,25,26)
cbind(x,y,z,k)
# === Practice 2 ===
# Please use cbind to output a matrix as follows:
# 5 11 21 24
# 6 12 22 25
# 7 13 23 26
x <- c(5,6,7)
y <- c(11,12,13)
z <- c(21,22,23)
k <- c(24,25,26)
cbind(5:7, 11:13, matrix(21:23, ncol=1), matrix(24:26, ncol=1))
cbind(x,y,z,k)
x <- rbind(2:4,5:7,8:10)
x <- rbind(2:4,5:7,8:10)
x[3,2]
# === Specific Number ===
x <- rbind(2:4,5:7,8:10)
print(x)
x[3,2]
# === Specific Number ===
x <- rbind(2:4,5:7,8:10)
print(x)
x[3,2] # Row:3, column:2 Test in Midterm Exam
x[3]
x[3,1] # x[3] == x[3,1]
x <- rbind(8:9,c(3:9,2),4:6)
matrix(1:12,nrow=4)
matrix(1:12,nrow=4)[-3,-2]
matrix(1:20,nrow=4)
matrix(1:20,nrow=3)
matrix(1:20,nrow=4)
matrix(1:20,nrow=4)
matrix(1:20,nrow=4)[-3,-4][-4,-5]
matrix(1:20,nrow=4)
x <- matrix(1:20,nrow=4)[-3,-4]
y <- x[-4,-5]
# === Practice 4 ===
# Please  create a matrix from 1 to 20, and do the output like as follows:
# 1 5 9
# 2 6 10
matrix(1:20,nrow=4)
x <- matrix(1:20,nrow=4)[-3,-4]
y <- x[-4,-5]
print(y)
# === Practice 4 ===
# Please  create a matrix from 1 to 20, and do the output like as follows:
# 1 5 9
# 2 6 10
matrix(1:20,nrow=4)
matrix(1:20,nrow=4)[-3:-4,-4:-5]
x <- matrix(1:20,nrow = 4)
x[3,2] <- 100
x[4,] <- 101
x <- matrix(1:20,nrow = 4)
x[3,2] <- 100
x[4,] <- 101
print(x)
x<-matrix(1:9,nrow=3)
print(x)
x<-matrix(1:9,nrow=3)
x[3,1] <- 5
x[3,2] <- 8
x[3,3] <- 66
print(x)
x<-matrix(1:9,nrow=3)
x[3,] <- c(5,8,66)
print(x)
matrix(1:12,nrow=3)
matrix(c(4,10,12,14),c(6,8,14,16),c(8,10,12,18)) - matrix(1:12,nrow=3)
matrix(c(4,10,12,14),c(6,8,14,16),c(8,10,12,18))
cbind(c(4,10,12,14),c(6,8,14,16),c(8,10,12,18)) - matrix(1:12,nrow=3)
cbind(c(4,10,12,14),c(6,8,14,16),c(8,10,12,18))
rbind(c(4,10,12,14),c(6,8,14,16),c(8,10,12,18))
rbind(c(4,10,12,14),c(6,8,14,16),c(8,10,12,18)) - matrix(1:12,nrow=3)
x <- rbind(c(4,10,12,14),c(6,8,14,16),c(8,10,12,18)) - matrix(1:12,nrow=3)
y <- matrix(1:12,nrow=3) + x
print(y)
x <- rbind(c(4,10,12,14),c(6,8,14,16),c(8,10,12,18)) - matrix(1:12,nrow=3)
y <- matrix(1:12,nrow=3) + x
print("x:",x)
print("y (varify the result):",y)
# Create matrix 'x' by subtracting a matrix from rbind()
x <- rbind(c(4, 10, 12, 14), c(6, 8, 14, 16), c(8, 10, 12, 18)) - matrix(1:12, nrow=3)
# Create matrix 'y' by adding matrix 'x' and another matrix
y <- matrix(1:12, nrow=3) + x
# Print the matrices separately
print("Matrix x:")
print(x)
print("Matrix y (verify the result):")
print(y)
# 建立1到9之間的數字向量
numbers <- 1:9
# 使用 combn 函數找出所有可能的三個數字組合
combinations <- combn(numbers, 3)
# 使用 apply 函數篩選出相加等於 15 的組合
valid_combinations <- combinations[, apply(combinations, 2, sum) == 15]
# 列出結果
print(valid_combinations)
# 建立1到9之間的數字向量
numbers <- 1:9
# 使用 combn 函數找出所有可能的三個數字組合
combinations <- combn(numbers, 3)
# 使用 apply 函數篩選出相加等於 15 的組合
valid_combinations <- combinations[, apply(combinations, 2, sum) == 15]
# 列出結果
print(str(valid_combinations))
# 建立1到9之間的數字向量
numbers <- 1:9
# 使用 combn 函數找出所有可能的三個數字組合
combinations <- combn(numbers, 3)
# 使用 apply 函數篩選出相加等於 15 的組合
valid_combinations <- combinations[, apply(combinations, 2, sum) == 15]
# 列出結果
print(valid_combinations)
bind(c(8,1,6),c(6,5,7),c(4,9,2))
result_rbind <- rbind(c(8, 1, 6), c(6, 5, 7), c(4, 9, 2))
print(result_rbind)
x <- matrix(1:9,nrow=3)
x <- matrix(1:9,nrow=3)
x <- matrix(1:9,nrow=3)
x <- matrix(1:9,nrow=3)
x <- matrix(1:9,nrow=3)
x <- matrix(1:9,nrow=3)''
x <- matrix(1:9,nrow=3)
print(x)
# Create a matrix: x <- matrix(1:9,nrow=3), and then replace some
# numbers with another matrix as follows:
# 1 4 7
# 2 1 3
# 3 2 4
x <- matrix(1:9,nrow=3)
x[2,] <- c(2,1,3)
x[3,] <- c(3,2,4)
print(x)
# Practice 10
x <- matrix(10:21,nrow=3)
print(x)
print(x[2,])
